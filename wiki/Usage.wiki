#summary How to use JSON-RPC library

<wiki:toc max_depth="2" />

= Dependencies =
   * [http://code.google.com/p/google-gson/ Gson 1.4]
   * [http://www.slf4j.org/ SLF4J 1.5.6]

== Maven ==

{{{
<dependencies>
   <dependency>
      <groupId>org.json.rpc</groupId>
      <artifactId>jsonrpc</artifactId>
      <version>1.0.0</version>
   </dependency>
</dependencies>

<repositories>
   <repository>
      <id>json-rpc</id>
      <url>http://json-rpc.googlecode.com/svn/mavenrepo/</url>
   </repository>
</repositories>
}}}

= Defining Interfaces =
Lets pickup an example of a _Calculator_ service. <br />

The client side interface will be
{{{

public interface Calculator {

   double add(double x, double y);

   double multiply(double x, double y);

   double average(double ...values);

}

}}}

The server side implementation will be 
{{{
public class CalculatorImpl implements Calculator {
   
   public double add(double x, double y) {
      return x + y;
   }

   public double multiply(double x, double y) {
      return x * y;
   }

   public  double average(double ...values) {
      if (values.length == 0) {
         return 0;
      }
      double sum = 0;
      for (double d : values) {
         sum += d;
      }
      return sum / values.length;
   }

}
}}}


= Binding Service Implementation =

Once the service is ready, it needs to be bound to the JSON-RPC Server to make it available.
{{{

private JsonRpcExecutor bind() {
   JsonRpcExecutor executor = new JsonRpcExecutor();

   Calculator calcImpl = new CalculatorImpl();
   executor.add("calc", calcImpl, Calculator.class); 

   // add more services here

   return executor;
}

}}}

= Hosting with a Servlet =
{{{

public class JsonRpcServlet extends HttpServlet {

    private final JsonRpcExecutor executor;

    public JsonRpcServlet() {
        executor = bind();
    }

    private JsonRpcExecutor bind() {
        JsonRpcExecutor executor = new JsonRpcExecutor();

        Calculator calcImpl = new CalculatorImpl();
        executor.add("calc", calcImpl, Calculator.class);
        // add more services here

        return executor;
    }

    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        executor.execute(new JsonRpcServletTransport(req, resp));
    }

}
}}}
= Access from Java Client =
{{{

// where the servlet is hosted
String url = "http://127.0.0.1:8888/jsonrpc"; 

HttpJsonRpcClientTransport transport = new HttpJsonRpcClientTransport(new URL(url));

JsonRpcInvoker invoker = new JsonRpcInvoker();
Calculator calc = invoker.get(transport, "calc", Calculator.class);

int result = calc.add(1, 2);

}}}

== Exception Handling ==
TODO

= Access from !JavaScript Client =
TODO
== Exception Handling ==
TODO